<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book lang="en" id="b-users-guide" xmlns:xi="http://www.w3.org/2001/XInclude">>
  <bookinfo>
    <title>The DRBD Users' Guide</title>
    <author>
      <firstname>Florian</firstname>
      <surname>Haas</surname>
     </author>
    <author>
      <firstname>Lars</firstname>
      <surname>Ellenberg</surname>
    </author>
    <date>January 18, 2008</date>
  </bookinfo>
  <chapter id="ch-build-install-from-source">
    <title>Building and installing DRBD from source</title>
    <section id="s-downloading-drbd-sources">
      <title>Downloading the DRBD sources</title>
      <para>The source tarballs for both current and historic DRBD
	releases are available for download from <ulink
	  url="http://oss.linbit.com/drbd/"/>.<footnote>
	  <para>LINBIT is the company that acts as the DRBD project's
	    primary sponsor, and which also provides commercial DRBD
	    support and consultancy services. More information about
	    LINBIT is available at <ulink
	      url="http://www.linbit.com/"/>.</para>
	</footnote> Source tarballs, by convention, are named
	<filename>drbd-x.y.z.tar.gz</filename>, where
	<varname>x</varname>, <varname>y</varname> and
      <varname>z</varname> refer to the major, minor and bugfix
      release numbers.</para>
      <para>DRBD's compressed source archive is less
      than half a megabyte in size. To download and uncompress into
      your current working directory, issue
	the following commands:<footnote>
	  <para>The use of <command>wget</command> for downloading the
      source tarball is purely an example. Of course, you may use any
      downloader you prefer.</para>
	</footnote>
	<programlisting>wget http://oss.linbit.com/drbd/drbd-8.2.4.tar.gz
tar -xzf drbd-8.2.4.tar.gz</programlisting></para>
      <para>It is recommended to uncompress DRBD into a directory
	normally used for keeping source code, such as
	<filename>/usr/src</filename> or
	<filename>/usr/local/src</filename>. The examples in this
	Howto assume <filename>/usr/src</filename>.</para>
    </section>
    <section id="s-build-from-source">
      <title>Building DRBD from source</title>
      <section id="s-build-prereq">
	<title>Checking build prerequisites</title>
	<para>Before being able to build DRBD from source, your build
	  host must fulfill the following prerequisites:</para>
	<itemizedlist>
	  <listitem>
	    <para><code>gcc</code>, the glibc development libraries,
	      <code>make</code>, and the <code>flex</code> scanner must
	      be installed.</para>
	    <note>
	      <para>You should make sure that the gcc you use to compile the module
		is the same which was used to build the kernel you are running.
	      </para>
	    </note>
	  </listitem>
	  <listitem>
	    <para>If you are running a stock kernel supplied by your
	      distribution, you should install a matching precompiled
	      kernel headers package. These are typically named
	      <code>kernel-dev</code>, <code>kernel-headers</code>,
	      <code>linux-headers</code> or similar. In this case, you
	      can skip <xref linkend="s-build-prepare-tree"/> and
	      continue with <xref
		linkend="s-build-compile-kernel-module"/>.</para>
	  </listitem>
	  <listitem>
	    <para>If you are not running a distribution stock kernel
	      (i.e. your system runs on a kernel built from source
	      with a custom configuration), your kernel source files
	      must be installed. Your distribution may provide for
	      this via its package installation mechanism;
	      distribution packages for kernel sources are typically named
	      <code>kernel-source</code><footnote>
		<para>Note that on RPM-based systems, these packages
		  will be named similar to
		  <filename>kernel-source-VERSION.rpm</filename>,
		  which is easily confused with
		  <filename>kernel-VERSION.src.rpm</filename>. The
		  former is the correct package to install for
		  building DRBD.</para></footnote> or
	      similar. </para>
	    <para>"Vanilla" kernel tarballs from the kernel.org
	      archive are simply named linux-KERNELVERSION-tar.bz2 and
	      should be unpacked in
	      <filename>/usr/src/linux-KERNELVERSION</filename>, with
	      the symlink <filename>/usr/src/linux</filename> pointing
	      to that directory. </para>
	    <para>In this case of building DRBD against
	      kernel sources (not headers), you must continue with <xref
		linkend="s-build-prepare-tree"/>.</para>
	  </listitem>
	</itemizedlist>
      </section>
      <section id="s-build-prepare-tree">
	<title>Preparing the kernel source tree</title>
	<para>To prepare your source tree for building DRBD, you must
	first enter the directory where your unpacked kernel sources
	  are located. Typically this is
	<filename>/usr/src/linux-VERSION</filename>, or simply a
	  symbolic link named <filename>/usr/src/linux</filename>:
	  <programlisting>cd /usr/src/linux</programlisting></para>
	<para>The next step is recommended, though not strictly
	necessary. It essentially reverts your kernel source tree to
	its original state, removing any leftovers from an earlier
	build or configure run:
	<programlisting>make mrproper</programlisting></para>
	<para>Now it is time to <emphasis>clone</emphasis> your
	currently running kernel configuration into the kernel source
	tree. There are a few possible options for doing this:
	  <itemizedlist>
	    <listitem>
	      <para>Many reasonably recent kernel builds export the
		currently-running configuration, in compressed form, via the
		<filename>/proc</filename> filesystem, enabling you to copy
		from there:
		<programlisting>zcat /proc/config.gz > .config</programlisting>
	      </para>
	    </listitem>
	    <listitem>
	      <para>SUSE kernel Makefiles include a
	      <code>cloneconfig</code> target, so on those systems,
	      you can issue:
		<programlisting>make cloneconfig</programlisting></para>
	    </listitem>
	    <listitem>
	      <para>Some installs put a copy of the kernel config into
		<filename>/boot</filename>, which allows you to do
		this:</para>
	      <programlisting>cp /boot/config-$(uname -r) .config</programlisting>
	    </listitem>
	    <listitem>
	      <para>Finally, you may simply use a backup copy of a
		<filename>.config</filename> file which you know to
		have been used for building the currently-running
		kernel.</para>
	    </listitem>
	  </itemizedlist>
	</para>
      </section>
      <section id="s-build-compile-kernel-module">
	<title>Compiling DRBD as a kernel module</title>
	<note>
	  <para>This section only applies to building DRBD as a
	    loadable module. If you want to build DRBD right
	    <emphasis>into</emphasis> your kernel image, you will have
	    to patch your kernel. See <xref
	    linkend="s-build-patch-kernel"/>. Using DRBD as a loadable
	    module is the preferred option.</para>
	</note>
	<para>After changing into your unpacked DRBD sources
	directory, you should now change into the kernel module
	  subdirectory, simply named <filename>drbd</filename>, and
	build the module there:
	  <programlisting>cd drbd
make clean all</programlisting></para>
	<para>This will build the DRBD kernel module to match your
	currently-running kernel, whose kernel source is expected to
	be accessible via the 
	  <filename>/lib/modules/`uname&nbsp;-r`/build</filename> symlink.</para>
	<para>If that symlink does not exist, and you are building
	against a running stock kernel (one that was
	shipped pre-compiled with your distribution), you may also set
	  the <varname>KDIR</varname> variable to point to the
	<emphasis>matching</emphasis> kernel headers (as opposed to
	kernel sources) directory, for
	example:
	  <programlisting>cd drbd
make clean
make KDIR=/usr/src/linux-include/athlon</programlisting></para>
	<para>If you are building DRBD against a kernel
	<emphasis>other</emphasis> than your currently running one,
	  set the <varname>KDIR</varname> variable to point to its
	kernel sources directory:
	  <programlisting>cd drbd
make clean
make KDIR=/path/to/kernel/source</programlisting></para>
	<para>You also have the option of setting the compiler
	  explicitly via the <varname>CC</varname> variable. This is
	known to be necessary on some Fedora versions, for example:
	  <programlisting>cd drbd
make clean
make CC=gcc32</programlisting></para>
	<para>If the module build completes successfully, you should see
	  a kernel module file named <filename>drbd.ko</filename> in
	  the <filename>drbd</filename> directory. You may interrogate
	  the newly-built module with <command>/sbin/modinfo
	drbd.ko</command> if you are so inclined.</para>
      </section>
      <section id="s-build-patch-kernel">
	<title>Patching DRBD into the kernel</title>
	<note>
	  <para>This section only applies to building DRBD into a
	    kernel image, as opposed to compiling it as a loadable
	    module. Only use this if you have a valid reason to, for
	    example if you are building a kernel without loadable
	    modules support. Normally, using DRBD as a loadable
	    module is the preferred option.</para>
	</note>
	<para>This approach involves having the DRBD build system
	  generate a kernel patch, which you then apply to a kernel
	  source tree. To create the patch, issue these commands:
	  <programlisting>cd drbd
make clean
make KDIR=/usr/src/linux kernel-patch</programlisting>
	  This command will create a file named
	  <filename>patch-linux-KERNELVERSION-drbd-DRBDVERSION</filename>.</para>
	<para>You may review this patch and then apply it to your
	  kernel source tree, by issuing the following commands:
	  <programlisting>cd /usr/src/linux 
patch -p1 &lt; /usr/src/drbd-DRBDVERSION/patch-linux-KERNELVERSION-drbd-DRBDVERSION<footnote> 
	      <para>This example, as all others in this section,
		assume that you unpacked you DRBD source tarball in
		<filename>/usr/src/drbd-x.y.z</filename>, where
		<varname>x.y.z</varname> is your DRBD version you are
		building, and that sources for the kernel you are
		building against are in
		<filename>/usr/src/linux</filename>.</para>
	    </footnote></programlisting> After this, you can run
	  <code>make&nbsp;config</code>,
	  <code>make&nbsp;menuconfig</code>, or
	  <code>make&nbsp;xconfig</code>, whichever your preferred way
	  of configuring your kernel is, and enable DRBD for your
	  build. For the menu- or GUI-based configuration facilities,
	  you will find DRBD listed in the "Block devices"
	  section.</para>
	<para>After this, you can build your kernel as usual
	  (<code>make bzImage</code> et al.), and the resulting kernel
	  build will include DRBD.</para>
	<para>With this approach, you will need to build the DRBD
	  userspace management tools separately. This is done by
	  changing into the top-level directory of your unpacked DRBD
	  sources, and issuing the <command>make tools</command>
	  command:
	  <programlisting>cd /usr/src/drbd-x.y.z
make tools</programlisting>
	</para>
      </section>
    </section>
    <section id="s-build-install">
      <title>Installing DRBD</title>
      <para>Provided you DRBD build completed successfully, you will
	be able to install DRBD by issuing these
	commands:
	<programlisting>cd /usr/src/drbd-x.y.z
make install</programlisting></para>
      <para>If, however, you chose the build approach described in <xref
      linkend="s-build-patch-kernel"/>, DRBD kernel functionality will be enabled whenever
      you boot into your new kernel. In that case, you only need to
      install DRBD's userspace components:
	  <programlisting>cd /usr/src/drbd-x.y.z 
make install-tools</programlisting></para>
      <para>In either case, then DRBD userspace management tools
	(<filename>drbdadm</filename>, <filename>drbdsetup</filename>,
	and <filename>drbdmeta</filename>) will now be installed in
	<filename>/sbin</filename>.</para>
      <para>Note that any kernel upgrade will require you to rebuild
	and reinstall the DRBD kernel module to match the new kernel.
	The DRBD userspace tools, in contrast, need only be rebuilt
	and reinstalled when upgrading to a new DRBD version. If at
	any time you upgrade to a new kernel <emphasis>and</emphasis>
	new DRBD version, you will need to upgrade both
	components.</para>
    </section>
    <section id="s-build-rpm">
      <title>Building a DRBD RPM package</title>
      <para>The DRBD build system contains a facility to build RPM
	packages directly out of the DRBD source tree. For building
	RPMs, <xref linkend="s-build-prereq"/> applies essentially in
	the same way as for building and installing with
	<command>make</command>, except that you of course also need
	the RPM build tools.</para>
      <para>Also, see
	<xref linkend="s-build-prepare-tree"/> if you are not building
	against a running kernel with precompiled headers
	available.</para>
      <para>The build system offers two approaches for building RPMs.
	The simpler approach is to simply invoke the <code>rpm</code>
	target in the top-level Makefile: 
	<programlisting>cd /usr/src/drbd-x.y.z 
make rpm</programlisting> This approach
	will auto-generate a spec file from a predefined template and
	build a binary RPM package from it.</para>
      <para>The other, more flexible approach is to copy the
	<filename>drbd.spec.in</filename> file to
      <filename>drbd.spec</filename>, make any modifications you deem
      necessary, and manually invoke the RPM build process:
	<programlisting>cd /usr/src/drbd-x.y.z
cp drbd.spec.in drbd.spec
vi drbd.spec
rpmbuild -bb drbd.spec</programlisting></para>
      <para>The RPM build process will create two binary RPM packages:
	<orderedlist>
	  <listitem>
	    <para>A package containing the DRBD userspace tools, named
	      <filename>drbd-x.y.z-BUILD.ARCH.rpm</filename>;</para>
	  </listitem>
	  <listitem>
	    <para>A separate package containing the DRBD kernel
	      module, named
	      <filename>drbd-km-KERNELVERSION-x.y.z-BUILD.ARCH.rpm</filename>.</para>
	  </listitem>
	</orderedlist>
      </para>
      <para>
	If you chose the <command>make rpm</command> approach, you
	will find these packages in the <filename>dist/RPMS</filename>
	subdirectory of your DRBD source tree. If you hacked your own
	spec file and then invoked <command>rpmbuild</command>, the
	RPMs will be created wherever your system RPM configuration
	(or your personal <filename>~/.rpmmacros</filename>)
	dictates.</para>
      <para>After you have created these packages, you can install,
	upgrade, and uninstall them as you would any other RPM package
	in your system.</para>
      <para>Note that any kernel upgrade will require you to generate
	a new <filename>drbd-km</filename> package to match the new
	kernel. The <filename>drbd</filename> package, in contrast,
	only need to be recreated when upgrading to a new DRBD
	version. If at any time you upgrade to a new kernel
	<emphasis>and</emphasis> new DRBD version, you will need to
	upgrade both packages.</para>
    </section>
    <section id="s-build-deb">
      <title>Building a DRBD Debian package</title>
      <para>The DRBD build system contains a facility to build Debian
	packages directly out of the DRBD source tree. For building
	Debian packages, <xref linkend="s-build-prereq"/> applies essentially in
	the same way as for building and installing with
	<command>make</command>, except that you of course also need
	the <filename>dpkg-dev</filename> package containing the
	Debian packaging tools, and <filename>fakeroot</filename> if
	you want to build DRBD as a non-<code>root</code> user (highly
	recommended).</para>
      <para>Also, see
	<xref linkend="s-build-prepare-tree"/> if you are not building
	against a running kernel with precompiled headers
	available.</para>
      <para>The DRBD source tree includes a
      <filename>debian</filename> subdirectory containing the required
      files for Debian packaging, so you can simply issue the
      following commands to build DRBD Debian packages:
	<programlisting>cd /usr/src/drbd-x.y.z
dpkg-buildpackage -rfakeroot -b -uc<footnote>
	    <para>This (example) <command>drbd-buildpackage</command>
	      invocation enables a binary-only build
	      (<option>-b</option>) by a non-<code>root</code> user
	      (<option>-rfakeroot</option>), disabling cryptographic
	      signature for the changes file (<option>-uc</option>).
	      Of course, you may prefer other build options, see the
	      <command>dpkg-buildpackage</command> man page for
	      details.</para>
	  </footnote>
	</programlisting></para>
      <para>This build process will create two Debian packages:
	<orderedlist>
	  <listitem>
	    <para>A package containing the DRBD userspace tools, named
	      <filename>drbd8-utils_x.y.z-BUILD_ARCH.deb</filename>;</para>
	  </listitem>
	  <listitem>
	    <para>A module source package suitable for <command>module-assistant</command> named
	      <filename>drbd8-module-source_x.y.z-BUILD_all.deb</filename>.</para>
	  </listitem>
	</orderedlist>
      </para>
      <para>After you have created these packages, you can install,
	upgrade, and uninstall them as you would any other Debian package
	in your system.</para>
      <para>Building and installing the actual kernel module from the
	installed module source package is easily accomplished via
	Debian's <command>module-assistant</command> facility:
	<programlisting>module-assistant auto-install drbd8</programlisting>
	You may also use the shorthand form
	of the above command: 
	<programlisting>m-a a-i drbd8</programlisting></para>
      <para>Note that any kernel upgrade will require you to rebuild
	the kernel module (with <command>module-assistant</command>,
	as just described) to match the new kernel. The
	<filename>drbd8-utils</filename> and
	<filename>drbd8-module-source</filename> packages, in
	contrast, only need to be recreated when upgrading to a new
	DRBD version. If at any time you upgrade to a new kernel
	<emphasis>and</emphasis> new DRBD version, you will need to
	upgrade both packages.</para>
    </section>
  </chapter>
  <chapter id="ch-install-packages">
    <title>Installing pre-built DRBD binary packages</title>
    <section id="s-linbit-packages">
      <title>Packages supplied by LINBIT</title>
      <para>LINBIT, the DRBD project's sponsor company, provides DRBD
      binary packages to its commercial support customers. These
	packages are available at <ulink
	  url="http://www.linbit.com/support/"/> and are considered
      "official" DRBD builds.</para>
      <para>These builds are available for the following
      distributions:
	<itemizedlist>
	  <listitem>
	    <para>Red Hat Enterprise Linux (RHEL), versions 4 and 5</para>
	  </listitem>
	  <listitem>
	    <para>SUSE Linux Enterprise Server (SLES), versions 9 and 10</para>
	  </listitem>
	  <listitem>
	    <para>Debian GNU/Linux, version 4.0 (<code>etch</code>)</para>
	  </listitem>
	  <listitem>
	    <para>Ubuntu Server Edition LTS, version 6.06 (Dapper Drake)</para>
	  </listitem>
	</itemizedlist>
	LINBIT releases binary builds in parallel with any new DRBD
	source release.</para>
      <para>Package installation on RPM-based systems (SLES, RHEL) is
	done by simply invoking <command>rpm&nbsp;-i</command> (for
	new installations) or <command>rpm&nbsp;-U</command> (for
	upgrades), along with the corresponding
	<filename>drbd</filename> and <filename>drbd-km</filename>
	package names. </para>
      <para>For Debian-based systems (Debian GNU/Linux, Ubuntu)
	systems, <filename>drbd8-utils</filename> and
	<filename>drbd8-module</filename> packages are installed with
	<command>dpkg&nbsp;-i</command>, or <command>gdebi</command>
	if available.</para>
    </section>
    <section id="s-distro-packages">
      <title>Packages supplied by distribution vendors</title>
      <para>A number of distributions include DRBD, including
      pre-built binary packages. Support for these builds, if any, is
      being provided by the associated distribution vendor. Their
      release cycle may lag behind DRBD source releases.</para>
      <itemizedlist>
	<listitem>
	  <para>SUSE Linux Enterprise Server (SLES), includes DRBD in
	    versions 9 and 10, however as of SLES 10 SP2 supports only
	    DRBD version 0.7.</para>
	  <para>On SLES, DRBD is normally installed via the software
	    installation component of YaST2.</para>
	</listitem>
	<listitem>
	  <para>Debian GNU/Linux includes DRBD 8 from the forthcoming
	    release <code>lenny</code> onwards, has included DRBD 0.7
	    since Debian 3.1 (<code>sarge</code>).</para>
	  <para>On <code>lenny</code> (which now includes pre-compiled
	    DRBD kernel modules and no longer requires the use of
	    <command>module-assistant</command>), you install DRBD by
	    issuing:</para>
	  <programlisting>apt-get install drbd8-utils drbd8-module</programlisting>
	  <para>On Debian 3.1 and 4.0, you must issue the following
	    commands:
	  <programlisting>apt-get install drbd0.7-utils drbd0.7-module-source build-essential module-assistant
module-assistant auto-install drbd0.7</programlisting>
	    See <xref linkend="s-build-deb"/> for details on the
	    installation process involving
	    <command>module-assistant</command>.</para>
	</listitem>
	<listitem>
	  <para>CentOS has had DRBD 8 since release 5, included 0.7 in
	    release 4.</para>
	  <para>DRBD can be installed using <command>yum</command>
	    (note that you will need the <code>extras</code>
	    repository enabled for this to work):
	    <programlisting>yum install drbd kmod-drbd</programlisting></para>
	</listitem>
	<listitem>
	  <para>Ubuntu includes DRBD 8 since release 7.10 (Gutsy
	    Gibbon), and has had DRBD 0.7 since release 6.06 (Dapper
	    Drake). To get DRBD, you need to enable the
	    <code>universe</code> component for your preferred Ubuntu
	    mirror in <filename>/etc/apt/sources.list</filename>, and
	    then issue these commands:
	  <programlisting>apt-get update
apt-get install drbd8-utils drbd8-module-source build-essential module-assistant
module-assistant auto-install drbd8</programlisting>
	  </para>
	  <warning>
	    <para>Ubuntu 6.10 (Edgy Eft) and 7.04 (Feisty Fawn) both
	      contained <emphasis>pre-release</emphasis> versions of
	      DRBD 8 that were never intended to be used on a
	      production system. The DRBD 0.7 version also included in
	      these Ubuntu releases, however, is fit for production
	      use (albeit now outdated).</para>
	  </warning>
	</listitem>
      </itemizedlist>
    </section>
  </chapter>
  <chapter id="ch-create-resources">
    <title>Configuring DRBD</title>
    <section>
      <title>Preparing your storage area</title>
      <para>After you have installed DRBD, you must set aside a
	roughly identically sized storage area on both cluster nodes.
	This will become the <emphasis>lower-level device</emphasis>
	for your DRBD resource. You may use any type of block device
	found on your system for this purpose. Typical examples
	include:
	<itemizedlist>
	  <listitem>
	    <para>A hard drive partition (or a full physical hard
	      drive),</para>
	  </listitem>
	  <listitem>
	    <para>a software RAID device,</para>
	  </listitem>
	  <listitem>
	    <para>an LVM Logical Volume or any other block device
	      configured by the Linux device-mapper
	      infrastructure,</para>
	  </listitem>
	  <listitem>
	    <para>an EVMS volume,</para>
	  </listitem>
	  <listitem>
	    <para>any other block device type found on your
	      system.</para>
	  </listitem>
	</itemizedlist>
      </para>
      <note>
	<para>While it is possible to use loop devices as lower-level
	devices for DRBD, doing so is not recommended due to deadlock
	issues.</para>
	<para>Also, DRBD does not support device stacking, meaning you
	cannot use one DRBD device as a lower-level device for
	another.</para>
      </note>
      <para>It is <emphasis>not</emphasis> necessary for this storage
      area to be empty before you create a DRBD resource from it. In
      fact it is a common use case to create a two-node cluster from a
      previously non-redundant single-server system using DRBD (some
	caveats apply &ndash; see <xref linkend="s-metadata"/>).</para>
    </section>
    <section id="s-metadata">
      <title>DRBD meta data</title>
      <para>DRBD stores various pieces of information about the data
      it keeps in a dedicated area. This metadata includes:
	<itemizedlist>
	  <listitem>
	    <para>the size of the DRBD device,</para>
	  </listitem>
	  <listitem>
	    <para>the Generation Identifier (<acronym>GI</acronym>),</para>
	  </listitem>
	  <listitem>
	    <para>the on-disk sync bitmap,<footnote>
		<para>Described in detail in <xref
		linkend="s-on-disk-bitmap"/>.</para>
	      </footnote>
	    </para>
	  </listitem>
	  <listitem>
	    <para>the Activity Log (<acronym>AL</acronym>).<footnote>
		<para>Described in detail in <xref
		linkend="s-activity-log"/>.</para>
	      </footnote></para>
	  </listitem>
	</itemizedlist>
      </para>
      <para>This metadata may be stored
	<emphasis>internally</emphasis> and
	<emphasis>externally</emphasis>. Which method is used is
	configurable on a per-resource basis.</para>
      <section id="s-internal-meta-data">
	<title>Internal meta data</title>
	<para>Configuring a resource to use internal meta data means
	  that DRBD stores its meta data on the same physical
	  lower-level device as the actual production data. It does so
	  by setting aside an area at the <emphasis>end</emphasis> of
	  the device for the specific purpose of storing metadata.
	</para>
	<formalpara>
	  <title>Advantage</title>
	  <para>Since the meta data are inextricably linked with the
	    actual data, no special action is required from the
	    administrator in case of a hard disk failure. The meta
	    data are lost together with the actual data and are also
	    restored together.</para>
	</formalpara>
	<formalpara>
	  <title>Disadvantage</title>
	    <para>In case of the lower-level device being a single
	    physical hard disk (as opposed to a RAID set), internal
	    meta data may negatively affect write throughput. The
	    performance of write requests by the application may
	    trigger an update of the meta data in DRBD. If the meta
	    data are stored on the same magnetic disk of a hard disk,
	    the write operation may result in two additional movements
	    of the write/read head of the hard disk.
	    </para>
	</formalpara>
	<caution>
	  <para>If you are planning to use internal meta data in
	  conjuntion with an existing lower-level device that already
	    has data which you wish to preserve, you
	  <emphasis>must</emphasis> account for the space required by
	  DRBD's meta data. Otherwise, upon DRBD resource creation,
	  the newly created metadata would overwrite data at the end
	  of the lower-level device, potentially destroying existing
	  files in the process. To avoid that, you must do one of the
	  following things:
	    <itemizedlist>
	      <listitem>
		<para>Enlarge your lower-level device. This is
		possible with any logical volume management facility
		(such as LVM or EVMS) as long as you have free space
		available in the corresponding volume group or
		container. It may also be supported by hardware
		storage solutions.</para>
	      </listitem>
	      <listitem>
		<para>Shrink your existing file system on your
		lower-level device. This may or may not be supported
		  By your file system.<footnote>
		    <para>The ext3 file system, for example, supports offline file
		      system shrinking. So does ReiserFS. XFS does not.</para>
		  </footnote>
		</para>
	      </listitem>
	      <listitem>
		<para>If neither of the two are possible, use <link
		linkend="s-external-meta-data">external meta
		data</link> instead.</para>
	      </listitem>
	    </itemizedlist>
	  </para>
	  <para>To estimate the amount by which you must enlarge your
	    lower-level device our shrink your file system, see <xref
	    linkend="s-meta-data-size"/>.</para>
	</caution>
      </section>
      <section id="s-external-meta-data">
	<title>External meta data</title>
	<para>External meta data are simply stored on a separate,
	dedicated block device distinct from that which holds your
	production data.</para>
	<formalpara>
	  <title>Advantage</title>
	  <para>For some write operations, using external meta data produces a
	  somewhat improved latency behavior.</para>
	</formalpara>
	<formalpara>
	  <title>Disadvantage</title>
	  <para>Meta data are not inextricably linked with the actual
	  production data. This means that manual intervention is
	  required in the case of a hardware failure destroying just the
	  production data (but not DRBD meta data), to effect a full
	  data sync from the surviving node onto the subsequently
	  replaced disk.</para>
	</formalpara>
	<para>Use of external meta data is also the only viable option
	  if <emphasis>all</emphasis> of the following apply:
	  <itemizedlist>
	    <listitem>
	      <para>You are using DRBD to duplicate an existing device
		that already contains data you wish to preserve,
		<emphasis>and</emphasis></para>
	    </listitem>
	    <listitem>
	      <para>that existing device does not support enlargement,
		<emphasis>and</emphasis></para>
	    </listitem>
	    <listitem>
	      <para>the existing file system on the device does not
	      support shrinking.</para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>To estimate the required size of the block device
	  dedicated to hold your device meta data, see <xref
	    linkend="s-meta-data-size"/>.</para>
      </section>
      <section id="s-meta-data-size">
	<title>Estimating meta data size</title>
	<para>You may calculate the exact space requirements for
	DRBD's meta data using the following formula:</para>
	<equation>
	</equation>
	<para><varname>C</varname> is the data device size in
	sectors.<footnote>
	    <para>You may retrieve the device size by issuing
	      <command>blockdev --getsz
		<replaceable>device</replaceable></command>.</para>
	    <para>However, <command>echo $(( $(blockdev --getsize64
		<replaceable>device</replaceable>) / 512))</command>
	      is more reliable, since it also works for block devices
	      larger than 2 TB.
	    </para>
	  </footnote>The result, <varname>M</varname>, is also
	  expressed in sectors. To convert to MB, divide by
	  2048.<footnote>
	    <para>The hard sector size on Linux (most architectures)
	      is 512 bytes or .5 KB. The only known deviation from
	      this applies to the s390 architecture.</para>
	  </footnote>
 	</para>
	<para>In practice, you may use a reasonably good
	approximation, given below. Note that in this formula, the
	unit is megabytes, not sectors:</para>
	<equation>
	</equation>
      </section>
    </section>
    <section id="s-config-file">
      <title>The DRBD configuration file</title>
      <para>All aspects of DRBD are controlled by a single
	configuration file, <filename>/etc/drbd.conf</filename>. You
	should always make sure this configuration file is
	<emphasis>exactly identical</emphasis> on both participating
	cluster nodes.
      </para>
      <note>
	<para>This section describes only those aspects of the
	  configuration file which most users encounter in everyday
	  operation. The configuration file's syntax contents are
	  documented in great detail in <xref
	    linkend="re-drbdconf"/>.</para>
      </note>
    </section>
  </chapter>
  <chapter id="ch-internals">
    <title>DRBD Internals</title>
    <section id="s-on-disk-bitmap">
      <title>The on-disk Sync Bitmap</title>
    </section>
    <section id="s-activity-log">
      <title>The Activity Log</title>
    </section>
  </chapter>
  <chapter id="ch-more-info">
    <title>Getting more information</title>
    <section id="s-mailing-list">
      <title>Public mailing list</title>
      <para>The public mailing list for general usage questions
	regarding DRBD is
      <email>drbd-user@lists.linbit.com</email>. This is a
	subscribers-only mailing list, you may subscribe at <ulink
	  url="http://lists.linbit.com/drbd-user"/>. A complete
	archive of the is available at <ulink
	  url="http://lists.linbit.com/pipermail/drbd-user"/>.
      </para>
    </section>
    <section id="s-commercial-support">
      <title>Commercial DRBD support</title>
      <para>Commercial DRBD support, consultancy, and training
	services are available from the project's sponsor company,
      <ulink url="http://www.linbit.com/">LINBIT</ulink>.</para>
    </section>
    <section id="s-useful-resources">
      <title>Useful web resources</title>
      <itemizedlist>
	<listitem>
	  <para><emphasis>Wikipedia</emphasis> keeps <ulink
	      url="http://en.wikipedia.org/wiki/DRBD">an entry on DRBD</ulink>.</para>
	</listitem>
	<listitem>
	  <para><emphasis>One of the co-authors of this Howto</emphasis> maintains <ulink
	      url="http://blogs.linbit.com/florian">a blog</ulink></para>
	</listitem>
      </itemizedlist>
    </section>
  </chapter>
  <appendix id="ap-man-pages">
    <title>DRBD system manual pages</title>
    <xi:include href="drbd.conf.xml" parse="xml"/>
    <xi:include href="drbdadm.xml" parse="xml"/>
    <xi:include href="drbdsetup.xml" parse="xml"/>
    <xi:include href="drbdmeta.xml" parse="xml"/>
  </appendix>
</book>
