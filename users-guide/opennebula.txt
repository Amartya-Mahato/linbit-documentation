[[ch-opennebula]]
== DRBD Volumes in OpenNebula

indexterm:[OpenNebula]This chapter describes DRBD in OpenNebula via the usage
of the https://github.com/OpenNebula/addon-drbdmanage[DRBDmanage storage driver addon].

Detailed installation and configuration instructions and be found in the
https://github.com/OpenNebula/addon-drbdmanage/blob/master/README.md[README.md]
file of the driver's source.

[[s-opennebula-overview]]
=== OpenNebula Overview

http://opennebula.org/[OpenNebula] is a flexible and open source cloud
management platform which allows its functionality to be extended via the use
of addons.

The DRBDmanage addon allows the deployment of virtual machines with highly
available images backed by DRBD and attached across the network with DRBD
Transport.

[[s-opennebula-install]]
=== OpenNebula Installation

Installation of the DRBDmanage storage addon for OpenNebula requires a working
OpenNebula cluster as well as a working DRBD cluster managed by DRBDmanage.

OpenNebula provides documentation of its
http://docs.opennebula.org/4.14/design_and_installation/index.html[design and installation],
which should be consulted when considering the creation of a new OpenNebula
cluster.

A DRBD cluster with DRBDmanage can be installed and configured by following the
instructions in this guide (see <<s-dm-init-cluster>>).

The OpenNebula and DRBD clusters can be somewhat independent of one another with
the following exceptions:

  * OpenNebula's Front-End and Host nodes must be included in both clusters.
  * The Front-End node must have a local copy of the DRBDmanage control
  volume.

Host nodes do not need a local copy of the DRBDmanage control volume and
host is also a storage node, it will use a local copy of an image if it is
virtual machine images are attached to them across the networkfootnote:[If a
available] (see <<s-openstack-drbd>>). These features simplify the process of
adding DRBD to an existing OpenNebula cluster. If this is desired, they may be
added to the DRBDmanage cluster using the `--no-storage` and `--satellite`
options.

Instructions for installing and configuring the DRBDmanage addon for OpenNebula
can be found in the README.md file of the addon. Or by visiting the
https://github.com/OpenNebula/addon-drbdmanage[GitHub page]
for the driver.

[[s-opennebula-deployment-policies]]
=== Deployment Policies

The DRBDmanage addon supports the count and ratio deployment policies (see
<<s-drbdmanage-deployment-policy>>).

By default, the driver considers a deployment successful if one resource is
deployed. These policies can be used through the template for the datastore and
through the configuration file found under `datastore/drbdmanage.conf`. Policies
set in the template will override the ones found in the configuration file.

[[s-opennebula-live-migration]]
=== Live Migration

Live migration, if enabled, is supported by attaching images to all nodes
that do not contain a local copy via DRBD Transport. This makes them available
to all nodes in the cluster without consuming additional storage space.

Please note that images that were created before live migration is enabled may
need to be assigned to any node they are expected to live migrate to using DRBDmanage
directly. This can also be achieved by cold migrating a to any VM where
it is expected to migrate to after enabling live migration support.

[[s-opennebula-free-space]]
=== Free Space Reporting

Free space is calculated differently depending on whether resources are deployed
according to `DRBD_REDUNDANCY` or `DRBD_DEPLOYMENT_NODES`.

For datastores using `DRBD_DEPLOYMENT_NODES`, free space is reported based on
the most restrictive resources pools from all nodes where resources are being
deployed. For example, the capacity of the node with the smallest amount of
total storage space is used to determine the total size of the datastore and
the node with the least free space is used to determine the remaining space in
the datastore.

For a datastore which uses `DRBD_REDUNDANCY`, size and remaining space are
determined based on the aggregate storage of the cluster divided by the level
of redundancy. It is possible that the free space reported will be larger than
the space remaining on any single node. For example, a freshly installed
cluster with two storage nodes that both have a capacity of 100Gb and a
redundancy level of 1 will report 200Gb of free space, even though no node
can store a 200Gb volume. The driver is able to determine this at the time a
new image is created and will alert the user.
