<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="ch-build-install-from-source">
  <title>Building and installing DRBD from source</title>
  <section id="s-downloading-drbd-sources">
    <title>Downloading the DRBD sources</title>
    <para><indexterm>
	<primary>source tarballs</primary>
	<secondary>downloading</secondary>
    </indexterm>The source tarballs for both current and historic DRBD
      releases are available for download from <ulink
	url="http://oss.linbit.com/drbd/"/>. Source tarballs, by
      convention, are named <filename>drbd-x.y.z.tar.gz</filename>,
      where <varname>x</varname>, <varname>y</varname> and
      <varname>z</varname> refer to the major, minor and bugfix
      release numbers.</para>
    <para>DRBD's compressed source archive is less than half a
      megabyte in size. To download and uncompress into your current
      working directory, issue the following commands:
      <programlisting>wget http://oss.linbit.com/drbd/8.3/drbd-8.3.4.tar.gz
tar -xzf drbd-8.3.4.tar.gz</programlisting><note>
	<para>The use of <command>wget</command> for downloading the
	  source tarball is purely an example. Of course, you may use
	  any downloader you prefer.</para>
      </note></para>
    <para>It is recommended to uncompress DRBD into a directory
      normally used for keeping source code, such as
      <filename>/usr/src</filename> or
      <filename>/usr/local/src</filename>. The examples in this guide
      assume <filename>/usr/src</filename>.</para>
  </section>
  <section id="s-checking-out-git">
    <title>Checking out sources from the public DRBD source
    repository</title>
    <para>DRBD's source code is kept in a public <ulink
	url="http://git.or.cz/">Git</ulink> repository, which may be
      browsed on-line at <ulink url="http://git.drbd.org/"/>. To check
      out a specific DRBD release from the repository, you must first
      <emphasis>clone</emphasis> your preferred DRBD branch. In this
      example, you would clone from the DRBD 8.3 branch:
      <programlisting>git clone git://git.drbd.org/drbd-8.3.git</programlisting>
      </para>
    <para>If your firewall does not permit TCP connections to port
      9418, you may also check out via HTTP (please note that using
      Git via HTTP is much slower than its native protocol, so native
      Git is usually preferred whenever possible):
      <programlisting>git clone http://git.drbd.org/drbd-8.3.git</programlisting>
    </para>
    <para>Either command will create a Git checkout subdirectory,
      named <filename>drbd-8.3</filename>. To now move to a source
      code state equivalent to a specific DRBD release, issue the
      following commands:
      <programlisting>cd drbd-8.3
git checkout drbd-8.3.<replaceable>x</replaceable></programlisting>
      ... where <replaceable>x</replaceable> refers to the DRBD point
      release you wish to build.</para>
    <para>The checkout directory will now contain the equivalent of an
      unpacked DRBD source tarball of a that specific version,
      enabling you to build DRBD from source.</para>
    <note>
      <para>There are actually two minor differences between an
      unpacked source tarball and a Git checkout of the same release:
	<itemizedlist>
	  <listitem>
	    <para>The Git checkout contains a
	      <filename>debian/</filename> subdirectoy, while the
	      source tarball does not. This is due to a request from
	      Debian maintainers, who prefer to add their own Debian
	      build configuration to a pristine upstream
	      tarball.</para>
	  </listitem>
	  <listitem>
	    <para>The source tarball contains preprocessed man pages,
	      the Git checkout does not. Thus, building DRBD from a
	      Git checkout requires a complete Docbook toolchain for
	      building the man pages, while this is not a requirement
	      for building from a source tarball.</para>
	  </listitem>
	</itemizedlist>
      </para>
    </note>
  </section>
  <section id="s-build-from-source">
    <title>Building DRBD from source</title>
    <section id="s-build-prereq">
      <title>Checking build prerequisites</title>
      <para>Before being able to build DRBD from source, your build
	host must fulfill the following prerequisites:</para>
      <itemizedlist>
	<listitem>
	  <para><indexterm>
	    <primary>build prerequisites</primary>
	  </indexterm>
	    <code>make</code>, <code>gcc</code>, the glibc
	    development libraries, and the <code>flex</code> scanner
	    generator must be installed.</para>
	  <note>
	    <para>You should make sure that the <code>gcc</code> you
	      use to compile the module is the same which was used to
	      build the kernel you are running. If you have multiple
	      <code>gcc</code> versions available on your system,
	      DRBD's build system includes a facility to <link
	      linkend="s-build-customcc">select a
	      specific <code>gcc</code> version</link>.
	    </para>
	  </note>
	</listitem>
	<listitem>
	  <para>For building directly from a git checkout, GNU
	  Autoconf is also required. This requirement does not apply
	  when building from a tarball.</para>
	</listitem>
	<listitem>
	  <para>If you are running a stock kernel supplied by your
	    distribution, you should install a matching precompiled
	    kernel headers package. These are typically named
	    <code>kernel-dev</code>, <code>kernel-headers</code>,
	    <code>linux-headers</code> or similar. In this case, you
	    can skip <xref linkend="s-build-prepare-kernel-tree"/> and
	    continue with <xref
	      linkend="s-build-prepare-checkout"/>.</para>
	</listitem>
	<listitem>
	  <para>If you are not running a distribution stock kernel
	    (i.e. your system runs on a kernel built from source with
	    a custom configuration), your kernel source files must be
	    installed. Your distribution may provide for this via its
	    package installation mechanism; distribution packages for
	    kernel sources are typically named
	    <code>kernel-source</code> or similar.
	    <note>
	      <para>On RPM-based systems, these packages will be named
		similar to
		<filename>kernel-source-<replaceable>version</replaceable>.rpm</filename>,
		which is easily confused with
		<filename>kernel-<replaceable>version</replaceable>.src.rpm</filename>.
		The former is the correct package to install for
		building DRBD.</para></note> </para>
	  <para>"Vanilla" kernel tarballs from the kernel.org archive
	    are simply named linux-<replaceable>version</replaceable>-tar.bz2 and should be
	    unpacked in
	    <filename>/usr/src/linux-<replaceable>version</replaceable></filename>, with
	    the symlink <filename>/usr/src/linux</filename> pointing
	    to that directory. </para>
	  <para>In this case of building DRBD against kernel sources
	    (not headers), you must continue with <xref
	      linkend="s-build-prepare-kernel-tree"/>.</para>
	</listitem>
      </itemizedlist>
    </section>
    <section id="s-build-prepare-kernel-tree">
      <title>Preparing the kernel source tree</title>
      <para>To prepare your source tree for building DRBD, you must
	first enter the directory where your unpacked kernel sources
	are located. Typically this is
	<filename>/usr/src/linux-<replaceable>version</replaceable></filename>,
	or simply a symbolic link named
	<filename>/usr/src/linux</filename>:
	<literallayout><userinput>cd /usr/src/linux</userinput></literallayout>
      </para>
      <para>The next step is recommended, though not strictly
	necessary. Be sure to copy your existing
	<filename>.config</filename> file to a safe location before
	performing it. This step essentially reverts your kernel
	source tree to its original state, removing any leftovers from
	an earlier build or configure run:
	<literallayout><userinput>make mrproper</userinput></literallayout></para>
      <para>Now it is time to <emphasis>clone</emphasis> your
	currently running kernel configuration into the kernel source
	tree. There are a few possible options for doing this:
	<itemizedlist>
	  <listitem>
	    <para>Many reasonably recent kernel builds export the
	      currently-running configuration, in compressed form, via
	      the <filename>/proc</filename> filesystem, enabling you
	      to copy from there:
	      <programlisting>zcat /proc/config.gz &gt; .config</programlisting>
	    </para>
	  </listitem>
	  <listitem>
	    <para>SUSE kernel Makefiles include a
	      <code>cloneconfig</code> target, so on those systems,
	      you can issue: <programlisting>make cloneconfig</programlisting></para>
	  </listitem>
	  <listitem>
	    <para>Some installs put a copy of the kernel config into
	      <filename>/boot</filename>, which allows you to do
	      this:</para>
	    <programlisting>cp /boot/config-`uname -r` .config</programlisting>
	  </listitem>
	  <listitem>
	    <para>Finally, you may simply use a backup copy of a
	      <filename>.config</filename> file which you know to have
	      been used for building the currently-running
	      kernel.</para>
	  </listitem>
	</itemizedlist>
      </para>
    </section>
    <section id="s-build-prepare-checkout">
      <title>Preparing the DRBD build tree</title>
      <para>Any DRBD compilation requires that you first
      configure your DRBD source tree with the included
      <filename>configure</filename> script. </para>
      <note>
	<para>The information in this section applies to DRBD 8.3.6
	and above. Up until release 8.3.5, DRBD had no
	<filename>configure</filename> script.</para>
	<para>When building from a git checkout, the
	<filename>configure</filename> script does not yet exist. You
	must create it by simply typing <command>autoconf</command> at
	the top of the checkout.</para>
      </note>
      <para>Invoking the configure script with the
      <option>--help</option> option returns a full list of supported
      options. The table below summarizes the most important ones:</para>
      <table id="t-configure-options">
	<title>Options supported by DRBD's configure script</title>
	<tgroup cols="4">
	  <thead>
	    <row>
	      <entry>Option</entry>
	      <entry>Description</entry>
	      <entry>Default</entry>
	      <entry>Remarks</entry>
	    </row>
	    </thead>
	    <tbody>
	      <row>
		<entry><option>--prefix</option></entry>
		<entry>Installation directory prefix</entry>
		<entry><filename>/usr/local</filename></entry>
		<entry>This is the default to maintain Filesystem
		Hierarchy Standard compatibility for locally
		installed, unpackaged software. In packaging, this is
		typically overridden with
		<filename>/usr</filename>.</entry>
	      </row>
	      <row>
		<entry><option>--localstatedir</option></entry>
		<entry>Locate state directory</entry>
		<entry><filename>/usr/local/var</filename></entry>
		<entry>Even with a default <code>prefix</code>, most
		users will want to override this with
		<filename>/var</filename>.</entry>
	      </row>
	      <row>
		<entry><option>--sysconfdir</option></entry>
		<entry>System configuration directory</entry>
		<entry><filename>/usr/local/etc</filename></entry>
		<entry>Even with a default <code>prefix</code>, most
		users will want to override this with
		<filename>/etc</filename>.</entry>
	      </row>
	      <row>
		<entry><option>--with-km</option></entry>
		<entry>Build the DRBD kernel module</entry>
		<entry>no</entry>
		<entry>Enable this option when you are building a DRBD
		kernel module.</entry>
	      </row>
	      <row>
		<entry><option>--with-utils</option></entry>
		<entry>Build the DRBD userland utilities</entry>
		<entry>yes</entry>
		<entry>Disable this option when you are building a
		DRBD kernel module against a new kernel version, and
		not upgrading DRBD at the same time.</entry>
	      </row>
	      <row>
		<entry><option>--with-heartbeat</option></entry>
		<entry>Build DRBD Heartbeat integration</entry>
		<entry>yes</entry>
		<entry>You may disable this option unless you are
		planning to use DRBD's Heartbeat v1 resource agent or
		dopd.</entry>
	      </row>
	      <row>
		<entry><option>--with-pacemaker</option></entry>
		<entry>Build DRBD Pacemaker integration</entry>
		<entry>yes</entry>
		<entry>You may disable this option if you are not
		planning to use the Pacemaker cluster resource
		manager.</entry>
	      </row>
	      <row>
		<entry><option>--with-rgmanager</option></entry>
		<entry>Build DRBD Red Hat Cluster Suite integration</entry>
		<entry>no</entry>
		<entry>You should enable this option if you are
		planning to use DRBD with rgmanager, the Red Hat
		Cluster Suite cluster resource manager.</entry>
	      </row>
	      <row>
		<entry><option>--with-xen</option></entry>
		<entry>Build DRBD Xen integration</entry>
		<entry>yes (on x86 architectures)</entry>
		<entry>You may disable this option if you are not
		planning to use the <filename>block-drbd</filename>
		helper script for Xen integration.</entry>
	      </row>
	      <row>
		<entry><option>--with-bashcompletion</option></entry>
		<entry>Build programmable bash completion for
		<command>drbdadm</command></entry>
		<entry>yes</entry>
		<entry>You may disable this option if you are using a
		shell other than bash, or if you do not want to
		utilize programmable completion for the
		<command>drbdadm</command> command.</entry>
	      </row>
	      <row>
		<entry><option>--enable-spec</option></entry>
		<entry>Create a distribution specific RPM spec file</entry>
		<entry>no</entry>
		<entry>For package builders only: you may use this
		option if you want to create an RPM spec file adapted
		to your distribution. See also <xref linkend="s-build-rpm"/>.
		</entry>
	      </row>
	    </tbody>
	</tgroup>
      </table>
      <para>The configure script will adapt your DRBD build to distribution
      specific needs. It does so by auto-detecting which distribution
      it is being invoked on, and setting defaults accordingly. When
      overriding defaults, do so with caution.</para>
      <para>The configure script creates a log file,
      <filename>config.log</filename>, in the directory where it was
      invoked. When reporting build issues on the mailing list, it is
      usually wise to either attach a copy of that file to your email,
      or point others to a location from where it may be viewed or
      downloaded.</para>
    </section>
    <section id="s-build-userland">
      <title>Building DRBD userspace utilities</title>
      <important>
	<para>Building userspace utilities requires that you <link
	linkend="s-build-prepare-checkout">configured</link> DRBD with
	the <option>--with-utils</option> option, which is enabled by
	default.</para>
      </important>
      <para>To build DRBD's userspace utilities, invoke the following
      commands from the top of your DRBD checkout or expanded
      tarball:</para>
      <screen>
	<computeroutput>$ </computeroutput><userinput>make</userinput>
	<computeroutput>$ </computeroutput><userinput>sudo make install</userinput>
      </screen>
      <para>This will build the management utilities
      (<command>drbdadm</command>, <command>drbdsetup</command>, and
      <command>drbdmeta</command>), and install them in the
      appropriate locations. Based on the other
      <option>--with</option> options selected during the <link
      linkend="s-build-prepare-checkout">configure stage</link>, it
      will also install scripts to integrate DRBD with other
      applications.</para>
    </section>
    <section id="s-build-compile-kernel-module">
      <title>Compiling DRBD as a kernel module</title>
	<indexterm>
	  <primary>kernel module</primary>
	</indexterm>
      <important>
	<para>Building the DRBD kernel module requires that you <link
	linkend="s-build-prepare-checkout">configured</link> DRBD with
	the <option>--with-km</option> option, which is disabled by
	default.</para>
      </important>
      <section id="s-build-against-running-kernel">
	<title>Building DRBD for the currently-running kernel</title>
	<para>After changing into your unpacked DRBD sources
	  directory, you should now change into the kernel module
	  subdirectory, simply named <filename>drbd</filename>, and
	  build the module there:
	  <programlisting>cd drbd
make clean all</programlisting></para>
	<para>This will build the DRBD kernel module to match your
	  currently-running kernel, whose kernel source is expected to
	  be accessible via the <filename>/lib/modules/`uname -r`/build</filename>
	symlink.</para>
      </section>
      <section id="s-build-against-kernel-headers">
	<title>Building against precompiled kernel headers</title>
	<para>If the <filename>/lib/modules/`uname -r`/build</filename>
	  symlink does not exist, and you are
	  building against a running stock kernel (one that was
	  shipped pre-compiled with your distribution), you may also
	  set the <varname>KDIR</varname> variable to point to the
	  <emphasis>matching</emphasis> kernel headers (as opposed to
	  kernel sources) directory. Note that besides the actual
	  kernel headers &mdash; commonly found in
	  <filename>/usr/src/linux-<replaceable>version</replaceable>/include</filename>
	  &mdash; the DRBD build process also looks for the
	  kernel Makefile and configuration file
	  (<filename>.config</filename>), which pre-built kernel
	  headers packages commonly include. To build against
	  precompiled kernel headers, issue, for example:
	  <screen><computeroutput>$ </computeroutput><userinput>cd drbd</userinput>
<computeroutput>$ </computeroutput><userinput>make clean</userinput>
<computeroutput>$ </computeroutput><userinput>make KDIR=/lib/modules/2.6.31/build</userinput></screen> 
	</para>
      </section>
      <section id="s-build-against-source-tree">
	<title>Building against a kernel source tree</title>
	<para>If you are building DRBD against a kernel
	  <emphasis>other</emphasis> than your currently running one,
	  and you do not have precompiled kernel sources for your
	  target kernel available, you need to build DRBD against a
	  complete target kernel source tree. To do so, set the
	  <varname>KDIR</varname> variable to point to the kernel
	  sources directory: <screen><computeroutput>$ </computeroutput><userinput>cd drbd</userinput>
<computeroutput>$ </computeroutput><userinput>make clean</userinput>
<computeroutput>$ </computeroutput><userinput>make KDIR=/path/to/kernel/source</userinput></screen></para>
      </section>
      <section id="s-build-customcc">
	<title>Using a non-default C compiler</title>
	<para>You also have the option of setting the compiler
	  explicitly via the <varname>CC</varname> variable. This is
	  known to be necessary on some Fedora versions, for example:
	  <programlisting>cd drbd
make clean
make CC=gcc32</programlisting></para>
      </section>
      <section id="s-build-modinfo">
	<title>Checking for successful build completion</title>
      <para>If the module build completes successfully, you should see
	a kernel module file named <filename>drbd.ko</filename> in the
	<filename>drbd</filename> directory. You may interrogate the
	newly-built module with <command>/sbin/modinfo
	  drbd.ko</command> if you are so inclined.</para>
      </section>
    </section>
  </section>
  <!--
  <section id="s-build-install">
    <title>Installing DRBD</title>
    <para>Provided your DRBD build completed successfully, you will be
      able to install DRBD by issuing these commands:
      <programlisting>cd /usr/src/drbd-x.y.z
sudo make install</programlisting></para>
    <para>The DRBD userspace management tools
      (<filename>drbdadm</filename>, <filename>drbdsetup</filename>,
      and <filename>drbdmeta</filename>) will now be installed in
      <filename>/sbin</filename>.</para>
    <para>Note that any kernel upgrade will require you to rebuild and
    reinstall the DRBD kernel module to match the new kernel. See
    <xref linkend="t-configure-options"/> for configure options that
    may speed up the process.</para>
    <para> The DRBD userspace tools, in contrast, need only be rebuilt
    and reinstalled when upgrading to a new DRBD version. If at any
    time you upgrade to a new kernel <emphasis>and</emphasis> new DRBD
    version, you will need to upgrade both components.</para>
  </section>
  -->
  <section id="s-build-rpm">
    <title>Building a DRBD RPM package</title>
    <note>
      <para>The information in this section applies to DRBD 8.3.6 and
      above. Up until release 8.3.5, DRBD used a different RPM build
      approach.</para>
    </note>
    <para>The DRBD build system contains a facility to build RPM
      packages directly out of the DRBD source tree. For building
      RPMs, <xref linkend="s-build-prereq"/> applies essentially in
      the same way as for building and installing with
      <command>make</command>, except that you also need the RPM build
      tools, of course.</para>
    <para>Also, see
	<xref linkend="s-build-prepare-kernel-tree"/> if you are not building
      against a running kernel with precompiled headers
      available.</para>
    <para>The build system offers two approaches for building RPMs.
      The simpler approach is to simply invoke the <code>rpm</code>
      target in the top-level Makefile:
      <screen><computeroutput>$ </computeroutput><userinput>./configure</userinput>
<computeroutput>$ </computeroutput><userinput>make rpm</userinput>
<computeroutput>$ </computeroutput><userinput>make km-rpm</userinput></screen>
      This approach will auto-generate spec files from pre-defined
      templates, and then use those spec files to build binary RPM
      packages.</para>
      <para>The <command>make rpm</command> approach generates a
      number of RPM packages:</para>
      <table id="t-rpm-packages">
	<title>DRBD userland RPM packages</title>
	<tgroup cols="4">
	  <thead>
	    <row>
	      <entry>Package name</entry>
	      <entry>Description</entry>
	      <entry>Dependencies</entry>
	      <entry>Remarks</entry>
	    </row>
	    </thead>
	    <tbody>
	      <row>
		<entry><code>drbd</code></entry>
		<entry>DRBD meta-package</entry>
		<entry>All other <code>drbd-*</code> packages</entry>
		<entry>Top-level virtual package. When installed, this
		pulls in all other userland packages as
		dependencies.</entry>
	      </row>
	      <row>
		<entry><code>drbd-utils</code></entry>
		<entry>Binary administration utilities</entry>
		<entry/>
		<entry>Required for any DRBD enabled host</entry>
	      </row>
	      <row>
		<entry><code>drbd-udev</code></entry>
		<entry>udev integration facility</entry>
		<entry><code>drbd-utils</code>, <code>udev</code></entry>
		<entry>Enables udev to manage user-friendly symlinks to
		DRBD devices</entry>
	      </row>
	      <row>
		<entry><code>drbd-xen</code></entry>
		<entry>Xen DRBD helper scripts</entry>
		<entry><code>drbd-utils</code>, <code>xen</code></entry>
		<entry>Enables xend to auto-manage DRBD resources</entry>
	      </row>
	      <row>
		<entry><code>drbd-heartbeat</code></entry>
		<entry>DRBD Heartbeat integration scripts</entry>
		<entry><code>drbd-utils</code>, <code>heartbeat</code></entry>
		<entry>Enables DRBD management by legacy v1-style
		Heartbeat clusters</entry>
	      </row>
	      <row>
		<entry><code>drbd-pacemaker</code></entry>
		<entry>DRBD Pacemaker integration scripts</entry>
		<entry><code>drbd-utils</code>, <code>pacemaker</code></entry>
		<entry>Enables DRBD management by Pacemaker clusters</entry>
	      </row>
	      <row>
		<entry><code>drbd-rgmanager</code></entry>
		<entry>DRBD Red Hat Cluster Suite integration scripts</entry>
		<entry><code>drbd-utils</code>, <code>rgmanager</code></entry>
		<entry>Enables DRBD management by rgmanager, the Red
		Hat Cluster Suite resource manager</entry>
	      </row>
	      <row>
		<entry><code>drbd-bashcompletion</code></entry>
		<entry>Progammable bash completion</entry>
		<entry><code>drbd-utils</code>,
		<code>bash-completion</code></entry>
		<entry>Enables Programmable bash completion for the
		<command>drbdadm</command> utility</entry>
	      </row>
	    </tbody>
	</tgroup>
      </table>
    <para>The other, more flexible approach is to have
    <filename>configure</filename> generate the spec file, make any
    changes you deem necessary, and then use the
    <command>rpmbuild</command> command:</para>
    <screen><computeroutput>$ </computeroutput><userinput>./configure --enable-spec</userinput>
<computeroutput>$ </computeroutput><userinput>make tgz</userinput>
<computeroutput>$ </computeroutput><userinput>cp drbd*.tar.gz `rpm -E _sourcedir`</userinput>
<computeroutput>$ </computeroutput><userinput>rpmbuild -bb drbd.spec</userinput></screen>
    <para>If you are about to build RPMs for both the DRBD userspace
    utilities and the kernel module, use:</para>
    <screen><computeroutput>$ </computeroutput><userinput>./configure --enable-spec --with-km</userinput>
<computeroutput>$ </computeroutput><userinput>make tgz</userinput>
<computeroutput>$ </computeroutput><userinput>cp drbd*.tar.gz `rpm -E _sourcedir`</userinput>
<computeroutput>$ </computeroutput><userinput>rpmbuild -bb drbd.spec</userinput>
<computeroutput>$ </computeroutput><userinput>rpmbuild -bb drbd-km.spec</userinput></screen>
    <para>
      The RPMs will be created wherever your system RPM configuration
      (or your personal <filename>~/.rpmmacros</filename>
      configuration) dictates.</para>
    <para>After you have created these packages, you can install,
      upgrade, and uninstall them as you would any other RPM package
      in your system.</para>
    <para>Note that any kernel upgrade will require you to generate a
      new <filename>drbd-km</filename> package to match the new
      kernel.</para>
      <para>The DRBD userland packages, in contrast, need
      only be recreated when upgrading to a new DRBD version. If at
      any time you upgrade to a new kernel <emphasis>and</emphasis>
      new DRBD version, you will need to upgrade both packages.</para>
  </section>
  <section id="s-build-deb">
    <title>Building a DRBD Debian package</title>
    <para>The DRBD build system contains a facility to build Debian
      packages directly out of the DRBD source tree. For building
      Debian packages, <xref linkend="s-build-prereq"/> applies
      essentially in the same way as for building and installing with
      <command>make</command>, except that you of course also need the
      <filename>dpkg-dev</filename> package containing the Debian
      packaging tools, and <filename>fakeroot</filename> if you want
      to build DRBD as a non-<code>root</code> user (highly
      recommended).</para>
    <para>Also, see
	<xref linkend="s-build-prepare-kernel-tree"/> if you are not building
      against a running kernel with precompiled headers
      available.</para>
    <para>The DRBD source tree includes a <filename>debian</filename>
      subdirectory containing the required files for Debian packaging.
      That subdirectory, however, is not included in the DRBD source
      tarballs &mdash; instead, you will need to <link
	linkend="s-checking-out-git">create a Git checkout of a
	<emphasis>tag</emphasis> associated with a specific DRBD
	release.</link></para>
    <para>Once you have created your checkout in this fashion, you can
      issue the following commands to build DRBD Debian packages:
    <programlisting>dpkg-buildpackage -rfakeroot -b -uc</programlisting>
      <note>
	<para>This (example) <command>drbd-buildpackage</command>
	  invocation enables a binary-only build (<option>-b</option>)
	  by a non-<code>root</code> user
	  (<option>-rfakeroot</option>), disabling cryptographic
	  signature for the changes file (<option>-uc</option>). Of
	  course, you may prefer other build options, see the
	  <command>dpkg-buildpackage</command> man page for
	  details.</para>
      </note>
    </para>
    <para>This build process will create two Debian packages:
	<orderedlist>
	<listitem>
	  <para>A package containing the DRBD userspace tools, named
	    <filename>drbd8-utils_x.y.z-BUILD_ARCH.deb</filename>;</para>
	</listitem>
	<listitem>
	  <para>A module source package suitable for
	    <command>module-assistant</command> named
	    <filename>drbd8-module-source_x.y.z-BUILD_all.deb</filename>.</para>
	</listitem>
	</orderedlist>
    </para>
    <para>After you have created these packages, you can install,
      upgrade, and uninstall them as you would any other Debian
      package in your system.</para>
    <para>Building and installing the actual kernel module from the
      installed module source package is easily accomplished via
      Debian's <command>module-assistant</command> facility:
      <programlisting>module-assistant auto-install drbd8</programlisting>
      You may also use the shorthand form of
      the above command:
      <programlisting>m-a a-i drbd8</programlisting></para>
    <para>Note that any kernel upgrade will require you to rebuild the
      kernel module (with <command>module-assistant</command>, as just
      described) to match the new kernel. The
      <filename>drbd8-utils</filename> and
      <filename>drbd8-module-source</filename> packages, in contrast,
      only need to be recreated when upgrading to a new DRBD version.
      If at any time you upgrade to a new kernel
      <emphasis>and</emphasis> new DRBD version, you will need to
      upgrade both packages.</para>
  </section>
</chapter>
