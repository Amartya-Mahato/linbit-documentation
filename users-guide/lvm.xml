<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="ch-lvm">
    <title>Managing LVM volumes on DRBD</title>
    <para>This chapter deals with managing DRBD on top of
      LVM2,<footnote>
	<para>LVM2 is an implementation of logical volume management
	  in the context of the Linux device mapper framework. It has
	  practically nothing in common, other than the name and
	  acronym, with the original LVM implementation. The old
	  implementation (now retroactively named "LVM1") is
	  considered obsolete; it is not covered in this
	  section.</para>
      </footnote> in particular, using DRBD resources as Physical
      Volumes and creating Logical Volumes in their context (if you
      are unfamiliar with these terms, see <xref
	linkend="s-lvm-primer"/>).</para>
    <section id="s-lvm-primer">
      <title>LVM primer</title>
      <para>When working with LVM, it is important to understand its
	most basic concepts:
	<itemizedlist>
	  <listitem>
	    <formalpara>
	      <title>Physical Volume (PV)</title>
	      <para>A PV is an underlying block device exclusively
		managed by LVM. PVs can either be entire hard disks or
		individual partitions. It is common practice to create
		a partition table on the hard disk where one partition
		is dedicated to the use by the Linux LVM.<footnote>
		  <para>The partition type "Linux LVM" (signature
		    <code>0x8E</code>) can be used to identify
		    partitions for exclusive use by LVM. This,
		    however, is not required &mdash; LVM recognizes
		    PVs by way of a signature written to the device
		    upon PV initialization.</para>
		</footnote>
	      </para>
	    </formalpara>
	  </listitem>
	  <listitem>
	    <formalpara>
	      <title>Volume Group (VG)</title>
	      <para>A VG is the basic administrative unit of the LVM.
		A VG may include one or more several PVs. Every VG has
		a unique name. A VG may be increased during runtime by
		adding additional PVs or by enlarging a PV at
		runtime.</para>
	    </formalpara>
	  </listitem>
	  <listitem>
	    <formalpara>
	      <title>Logical Volume (LV)</title>
	      <para>LVs may be created during runtime within VGs and
		are available to the other parts of the kernel as
		regular block devices. As such, they may be used to
		hold a file system, or for any other purpose block
		devices may be used for. LVs may be resized while they
		are online, and they may also be moved from one PV to
		another (as long as the PVs are part of the same
		VG).</para>
	    </formalpara>
	  </listitem>
	  <listitem>
	    <formalpara>
	      <title>Snapshot Logical Volume (SLV)</title>
	      <para>Snapshots are temporary point-in-time copies of
		LVs. Creating snapshots is an operation that completes
		almost instantly, even if the original LV (the
		<emphasis>origin volume</emphasis>) has a size of
		several hundred GiByte. Usually, a snapshot requires
		significantly less space than the original LV.</para>
	    </formalpara>
	  </listitem>
	</itemizedlist>
	<figure id="f-lvm-overview">
	  <title>LVM overview</title>
	  <graphic fileref="lvm"/>
	</figure>
      </para>
    </section>
    <section id="s-drbd-as-pv">
      <title>Configuring a DRBD resource as a Physical Volume</title>
      <para>In order to prepare a DRBD resource for use as a Physical
	Volume, it is necessary to create a PV signature on the DRBD
	device. In order to do so, issue one of the following commands
	on the node where the resource is currently in the primary
	role:
	<literallayout><userinput>pvcreate /dev/drbd<replaceable>num</replaceable></userinput></literallayout>
	or
	<literallayout><userinput>pvcreate $(drbdadm sh-dev <replaceable>resource</replaceable>)</userinput></literallayout>
      </para>
      <para>Now, it is necessary to include this device in the list of
	devices LVM scans for PV signatures. In order to do this, you
	must edit the LVM configuration file, normally named
	<filename>/etc/lvm/lvm.conf</filename>. Find the line in the
	<code>devices</code> section that contains the
	<option>filter</option> keyword and edit it accordingly. If
	<emphasis>all</emphasis> your PVs are to be stored on DRBD
	devices, the following is an appropriate
	<option>filter</option> option: 
	<programlisting>filter = [ "a|drbd.*|", "r|.*|" ]</programlisting> 
	This filter expression <option>a</option>ccepts PV
	signatures found on any DRBD devices, while
	<option>r</option>ejecting (ignoring) all others.<footnote>
	  <para>By default, LVM scans all block devices found in
	    <filename>/dev</filename> for PV signatures. This is
	    equivalent to <code>filter = [ "a|.*|" ]</code>.</para>
	</footnote>
      </para>
      <para>After modifying the <filename>lvm.conf</filename> file,
	you must run the <command>vgscan</command> command so LVM
	discards its configuration cache and re-scans devices for PV
	signatures.</para>
      <para>You may of course use a different <option>filter</option>
	configuration to match your particular system configuration.
	What is important to remember, however, is that you need to
	<itemizedlist>
	  <listitem>
	    <para>Accept (include) the DRBD devices you wish to use as
	      PVs;</para>
	  </listitem>
	  <listitem>
	    <para>Reject (exclude) the corresponding lower-level
	      devices, so as to avoid LVM finding duplicate PV
	      signatures.</para>
	  </listitem>
	</itemizedlist>
      </para>
    </section>
    <section id="s-nested-lvm">
      <title>Nested LVM configuration with DRBD</title>
      <para>It is possible, if slightly advanced, to both use Logical
	Volumes as backing devices for DRBD <emphasis>and</emphasis>
	at the same time use a DRBD device itself as a Physical
	Volume. To provide an example, consider the following
	configuration:
	<itemizedlist>
	  <listitem>
	    <para>We have two partitions, named
	      <filename>/dev/sda1</filename>, and
	      <filename>/dev/sdb1</filename>, which we intend to use
	      as Physical Volumes.</para>
	  </listitem>
	  <listitem>
	    <para>Both of these PVs are to become part of a Volume
	      Group named <code>local</code>.</para>
	  </listitem>
	  <listitem>
	    <para>We want to create a 10-GiB Logical Volume in this
	      VG, to be named <code>r0</code>.
	    </para>
	  </listitem>
	  <listitem>
	    <para>This LV will become the local backing device for our
	      DRBD resource, also named <code>r0</code>, which
	      corresponds to the device
	      <filename>/dev/drbd0</filename>.</para>
	  </listitem>
	  <listitem>
	    <para>This device will be the sole PV for another Volume
	      Group, named <code>replicated</code>.</para>
	  </listitem>
	  <listitem>
	    <para>This VG is to contain two more logical volumes named
	      <code>foo</code> (4 GiB) and <code>bar</code> (6
	      GiB).</para>
	  </listitem>
	</itemizedlist>
      </para>
      <para>In order to enable this configuration, follow these
	steps:</para>
      <orderedlist>
	<listitem>
	  <para>Set an appropriate <option>filter</option> option in your
	    <filename>/etc/lvm/lvm.conf</filename>:
	    <programlisting>filter = ["a|sd.*|", "a|drbd.*|", "r|.*|"]</programlisting>
	    This filter expression <option>a</option>ccepts PV
	    signatures found on any SCSI and DRBD devices, while
	<option>r</option>ejecting (ignoring) all others.</para>
	  <para>After modifying the <filename>lvm.conf</filename>
	    file, you must run the <command>vgscan</command> command
	    so LVM discards its configuration cache and re-scans
	    devices for PV signatures.</para>
	</listitem>
	<listitem>
	  <para>Now, you may initialize your two SCSI partitions as PVs:
	    <literallayout><userinput>pvcreate /dev/sda1</userinput>
<computeroutput>  Physical volume "/dev/sda1" successfully created</computeroutput>
<userinput>pvcreate /dev/sdb1</userinput>
<computeroutput>  Physical volume "/dev/sdb1" successfully created</computeroutput></literallayout>
      </para>
	</listitem>
	<listitem>
	  <para>The next step is creating your low-level VG named
	    <code>local</code>, consisting of the two PVs you just initialized:
	    <literallayout><userinput>vgcreate local /dev/sda1 /dev/sda2</userinput>
<computeroutput>  Volume group "local" successfully created</computeroutput></literallayout>
      </para>
	</listitem>
	<listitem>
	  <para>Now you may create your Logical Volume to be used as
	    DRBD's backing device:
	    <literallayout><userinput>lvcreate --name r0 --size 10G local</userinput>
<computeroutput>  Logical volume "local" created</computeroutput></literallayout>
	</para>
	</listitem>
      <listitem>
	<para>Repeat all steps, up to this point, on the peer node.</para>
      </listitem>
	<listitem>
	  <para>Then, edit your
	    <filename>/etc/drbd.conf</filename> to create a new resource
	    named <code>r0</code>:
	    <programlisting>resource r0 {
  device /dev/drbd0;
  disk /dev/local/r0;
  meta-disk internal;
  on <replaceable>host</replaceable> {
    address <replaceable>address</replaceable>:<replaceable>port</replaceable>;
  }
  on <replaceable>host</replaceable> {
    address <replaceable>address</replaceable>:<replaceable>port</replaceable>;
  }
}</programlisting>
	  After you have created your new resource configuration, be
	  sure to copy your <filename>drbd.conf</filename> contents to
	   the peer node.</para>
      </listitem>
	<listitem>
	  <para>After this, initialize your resource as described in
	    <xref linkend="s-first-time-up"/> (on both nodes).</para>
      </listitem>
      <listitem>
	<para>Then, promote your resource (on one node):
	  <literallayout><userinput>drbdadm primary r0</userinput></literallayout>
	</para>
	</listitem>
	<listitem>
	  <para>Now, on the node where you just promoted your
	    resource, initialize your DRBD device as a new Physical
	    Volume:
	    <literallayout><userinput>pvcreate /dev/drbd0</userinput>
<computeroutput>  Physical volume "/dev/drbd0" successfully created</computeroutput></literallayout>
	  </para>
	</listitem>
	<listitem>
	  <para>Create your VG named <code>replicated</code>, using
	  the PV you just initialized, on the same node:
	    <literallayout><userinput>vgcreate replicated /dev/drbd0</userinput>
<computeroutput>  Volume group "replicated" successfully created</computeroutput></literallayout>
	  </para>
	</listitem>
	<listitem>
	  <para>Finally, create your new Logical Volumes within this
	  newly-created VG:
	    <literallayout><userinput>lvcreate --name foo --size 4G replicated</userinput>
<computeroutput>  Logical volume "foo" created</computeroutput>
<userinput>lvcreate --name bar --size 6G replicated</userinput>
<computeroutput>  Logical volume "bar" created</computeroutput></literallayout>
	  </para>
	</listitem>
      </orderedlist>
    <para>The Logical Volumes <code>foo</code> and <code>bar</code>
	will now be available as
	<filename>/dev/replicated/foo</filename> and
	<filename>/dev/replicated/bar</filename> on the local node.
    </para>
    <para>To make them available on the peer node, first issue the following
    sequence of commands on the local node:
      <literallayout><userinput>vgchange -a n replicated</userinput>
<computeroutput>  0 logical volume(s) in volume group "replicated" now active</computeroutput>
<userinput>drbdadm secondary r0</userinput></literallayout>
    </para>
    <para>Then, issue these commands on the peer node:
      <literallayout><userinput>drbdadm primary r0</userinput>
<userinput>vgchange -a y replicated</userinput>
<computeroutput>  2 logical volume(s) in volume group "replicated" now active</computeroutput></literallayout>
    After this, the block devices
    <filename>/dev/replicated/foo</filename> and
    <filename>/dev/replicated/bar</filename> will be available on the
    peer node.</para>
    <para>Of course, the process of transferring volume groups between
      peers and making the corresponding logical volumes available can
      be automated. The Heartbeat <code>LVM</code> resource agent is
      designed for exactly that purpose.</para>
  </section>
</chapter>
